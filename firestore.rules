rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidFarmData() {
      return request.resource.data.name is string
        && request.resource.data.location is string
        && request.resource.data.code is string
        && request.resource.data.active is bool;
    }
    
    function isValidAvocadoTrackingData() {
      let data = request.resource.data;
      return data.harvest is map
        && data.harvest.harvestDate is string
        && data.harvest.farmLocation is string
        && data.harvest.farmerId is string
        && data.harvest.lotNumber is string
        && data.harvest.variety is string
        && data.transport is map
        && data.transport.lotNumber is string
        && data.transport.transportCompany is string
        && data.transport.driverName is string
        && data.transport.vehicleId is string
        && data.transport.departureDateTime is string
        && data.transport.arrivalDateTime is string
        && data.sorting is map
        && data.sorting.lotNumber is string
        && data.sorting.sortingDate is string
        && data.sorting.qualityGrade is string
        && data.sorting.rejectedCount is number
        && data.packaging is map
        && data.packaging.lotNumber is string
        && data.packaging.packagingDate is string
        && data.packaging.boxId is string
        && data.packaging.workerIds is list
        && data.packaging.netWeight is number
        && data.packaging.avocadoCount is number
        && data.packaging.boxType is string
        && data.storage is map
        && data.storage.boxId is string
        && data.storage.entryDate is string
        && data.storage.storageTemperature is number
        && data.storage.storageRoomId is string
        && data.storage.exitDate is string
        && data.export is map
        && data.export.boxId is string
        && data.export.loadingDate is string
        && data.export.containerId is string
        && data.export.driverName is string
        && data.export.vehicleId is string
        && data.export.destination is string
        && data.delivery is map
        && data.delivery.boxId is string
        && data.delivery.estimatedDeliveryDate is string
        && data.delivery.actualDeliveryDate is string
        && data.delivery.clientName is string
        && data.delivery.clientLocation is string
        && data.delivery.notes is string;
    }
    
    function isValidWarehouseData() {
      return request.resource.data.name is string
        && request.resource.data.location is string
        && request.resource.data.capacity is number
        && request.resource.data.code is string
        && request.resource.data.active is bool;
    }

    function isValidLotData() {
      let data = request.resource.data;
      return data.lotNumber is string
        && data.status is string && (data.status == 'active' || data.status == 'completed' || data.status == 'cancelled')
        && data.createdAt is string
        && data.updatedAt is string
        && data.harvest is map
        && data.harvest.date is string
        && data.harvest.farmId is string
        && data.harvest.farmName is string
        && data.harvest.farmerId is string
        && data.harvest.quantity is number
        && data.harvest.quality is string
        && data.harvest.defects is list
        && data.harvest.notes is string
        && data.transport is map
        && data.transport.company is string
        && data.transport.driverName is string
        && data.transport.vehicleNumber is string
        && data.transport.departureTime is string
        && data.transport.arrivalTime is string
        && data.transport.temperature is number
        && data.transport.notes is string
        && data.sorting is map
        && data.sorting.date is string
        && data.sorting.quantity is number
        && data.sorting.quality is string
        && data.sorting.defects is list
        && data.sorting.notes is string
        && data.packaging is map
        && data.packaging.date is string
        && data.packaging.quantity is number
        && data.packaging.quality is string
        && data.packaging.boxIds is list
        && data.packaging.packagingType is string
        && data.packaging.boxTypes is list
        && data.packaging.netWeights is list
        && data.packaging.avocadoCounts is list
        && data.packaging.workerIds is list
        && data.packaging.notes is string
        && data.storage is map
        && data.storage.warehouseId is string
        && data.storage.location is string
        && data.storage.temperature is number
        && data.storage.humidity is number
        && data.storage.entryDate is string
        && data.storage.exitDate is string
        && data.storage.notes is string
        && data.export is map
        && data.export.date is string
        && data.export.destination is string
        && data.export.quantity is number
        && data.export.quality is string
        && data.export.notes is string
        && data.delivery is map
        && data.delivery.date is string
        && data.delivery.customer is string
        && data.delivery.quantity is number
        && data.delivery.quality is string
        && data.delivery.notes is string;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update, delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Farms collection
    match /farms/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidFarmData();
      allow update: if isAuthenticated() && isValidFarmData();
      allow delete: if isAuthenticated();
    }
    
    // Lots collection
    match /lots/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidLotData();
      allow update: if isAuthenticated() && isValidLotData();
      allow delete: if isAuthenticated();
    }
    
    // Warehouses collection
    match /warehouses/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidWarehouseData();
      allow update: if isAuthenticated() && isValidWarehouseData();
      allow delete: if isAuthenticated();
    }
    
    // Avocado tracking collection
    match /avocado-tracking/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidAvocadoTrackingData();
      allow update: if isAuthenticated() && isValidAvocadoTrackingData();
      allow delete: if isAuthenticated();
    }
    
    // PDF reports collection
    match /pdfReports/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.lotNumber is string;
      allow update: if isAuthenticated() && request.resource.data.lotNumber is string;
      allow delete: if isAuthenticated();
    }
    
    // Inventory collection
    match /inventory/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isValidPDF() {
      return request.resource.contentType == 'application/pdf'
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // PDF reports storage
    match /reports/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isValidPDF();
    }
    
    // Temporary uploads
    match /temp/{fileName} {
      allow read, write: if isAuthenticated() && request.resource.size < 20 * 1024 * 1024;
    }
  }
}